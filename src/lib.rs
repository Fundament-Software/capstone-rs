//! Download and/or build official Cap-n-Proto compiler (capnp) release for the current OS and architecture

use anyhow::bail;
use std::path::Path;
use std::{env, fs};

include!(concat!(env!("OUT_DIR"), "/binary_decision.rs"));

pub fn process(paths: &[&str]) -> anyhow::Result<()> {
    let target_dir = env::var("OUT_DIR").unwrap();
    let cmdpath = CAPNP_BIN_PATH;
    let mut helperfile = String::from("// This file is autogenerated by capnp-fetch\n");

    let mut cmd = capnpc::CompilerCommand::new();
    cmd.capnp_executable(cmdpath);

    for path in paths.iter() {
        helperfile += append_path(&mut cmd, path)?.as_str();
    }

    if let Err(e) = cmd.run() {
        bail!(e.to_string());
    }
    fs::write(target_dir + "/capnp_include.rs", helperfile)?;
    Ok(())
}

fn append_path(cmd: &mut capnpc::CompilerCommand, strpath: &str) -> anyhow::Result<String> {
    let path = Path::new(strpath);
    let meta = std::fs::metadata(path)?;
    let mut helperfile = String::new();

    if meta.is_dir() {
        let dir = std::fs::read_dir(path)?;
        for fileresult in dir {
            helperfile += append_path(
                cmd,
                fileresult?.path().to_str().expect("path is not valid utf!"),
            )?
            .as_str();
        }
    } else {
        println!("cargo:rerun-if-changed={:?}", path);
        cmd.file(path);
        let section = format!(
            "
mod {}_{} {{
    include!(concat!(env!(\"OUT_DIR\"), \"/{}.rs\"));
}}",
            path.file_stem().unwrap().to_str().unwrap(),
            path.extension().unwrap().to_str().unwrap(),
            path.to_string_lossy().replace('\\', "/").replace('.', "_")
        );
        helperfile.push('\n');
        helperfile += &section;
    }
    Ok(helperfile)
}
