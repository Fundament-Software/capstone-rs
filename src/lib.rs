//! Download and/or build official Cap-n-Proto compiler (capnp) release for the current OS and architecture

use anyhow::bail;
use std::{env, fs, path::Path};
use wax::{Glob, BuildError};

include!(concat!(env!("OUT_DIR"), "/binary_decision.rs"));

fn process_inner(path_patterns: &[&str]) -> anyhow::Result<String> {
    let cmdpath = CAPNP_BIN_PATH;
    let mut helperfile = String::from("// This file is autogenerated by capnp-fetch\n");

    let mut cmd = capnpc::CompilerCommand::new();
    cmd.capnp_executable(cmdpath);

    for pattern in path_patterns {
        // Glob borrows values passed into it and the borrow checker doesn't like this.
        // So we use into_owned to clone the data.
        let glob = Glob::new(pattern)
            .map(Glob::into_owned)
            .map_err(BuildError::into_owned)?;

        let walk = glob.walk(".");
        for walk_result in walk {
            let entry = walk_result?;
            let path = entry.path();
            helperfile += append_path(&mut cmd, path)?.as_str();
        }
    }

    if let Err(e) = cmd.run() {
        bail!(e.to_string());
    }

    return Ok(helperfile);
}

pub fn process(path_patterns: &[&str]) -> anyhow::Result<()>
{
    let target_dir = env::var("OUT_DIR").unwrap();
    fs::write(target_dir + "/capnp_include.rs", process_inner(path_patterns)?)?;
    Ok(())
}

fn append_path(cmd: &mut capnpc::CompilerCommand, file_path: &Path) -> anyhow::Result<String> {
    let mut helperfile = String::new();

    cmd.file(file_path);
    let section = format!(
        "
mod {}_{} {{
include!(concat!(env!(\"OUT_DIR\"), \"/{}.rs\"));
}}",
        file_path.file_stem().unwrap().to_str().unwrap(),
        file_path.extension().unwrap().to_str().unwrap(),
        file_path.to_string_lossy().replace('\\', "/").replace('.', "_")
    );
    helperfile.push('\n');
    helperfile += &section;
    Ok(helperfile)
}

#[test]
fn basic_file_test() -> anyhow::Result<()> {
    println!("{:?}", std::env::current_dir().unwrap());
    assert_eq!(
        process_inner(&["tests/example.capnp"])?,
        "// This file is autogenerated by capnp-fetch\n\n\nmod example_capnp {\ninclude!(concat!(env!(\"OUT_DIR\"), \"/_/tests/example_capnp.rs\"));\n}"
    );
    Ok(())
}

#[test]
fn glob_test() -> anyhow::Result<()> {
    println!("{:?}", std::env::current_dir().unwrap());

    assert_eq!(
        process_inner(&["tests/**/*.capnp"])?,
        "// This file is autogenerated by capnp-fetch\n\n\nmod example_capnp {\ninclude!(concat!(env!(\"OUT_DIR\"), \"/_/tests/example_capnp.rs\"));\n}\n\nmod example_capnp {\ninclude!(concat!(env!(\"OUT_DIR\"), \"/_/tests/folder-test/example_capnp.rs\"));\n}"
    );
    Ok(())
}

